pipeline{
    agent any
    environment{
        BACKEND = "smart-home-backend"
        FRONTEND = "smart-home-dashboard"
        SIMULATOR = "smart-home-simulator"
        DOCKER_USERNAME = "nadavnv"
    }
    stages{
        stage('Clone'){
            parallel {
                stage("Cloning backend"){
                    steps{
                        echo "====== Cloning backend repo ======"
                        sh "mkdir SmartHomeBackend"
                        dir('SmartHomeBackend'){
                            git branch: 'main', url: 'https://github.com/NadavNV/SmartHomeBackend'
                        }
                    }
                }
                stage("Cloning frontend"){
                    steps{
                        echo "====== Cloning frontend repo ======"
                        sh "mkdir SmartHomeDashboard"
                        dir('SmartHomeDashboard'){
                            git branch: 'main', url: 'https://github.com/NadavNV/SmartHomeDashboard'
                        }
                    }
                }
                stage("Cloning simulator"){
                    steps{
                        echo "====== Cloning simulator repo ======"
                        sh "mkdir SmartHomeSimulator"
                        dir('SmartHomeSimulator'){
                            git branch: 'main', url: 'https://github.com/NadavNV/SmartHomeSimulator'
                        }
                    }
                }
            }
        }
        stage('Build'){
            parallel{
                stage("Buidling backend"){
                    steps{
                        echo "====== Building the backend ======"
                        // Make sure that the container name is available
                        sh "docker stop ${BACKEND} || true"
                        dir('SmartHomeBackend'){
                            sh "docker build -t ${DOCKER_USERNAME}/${BACKEND}:V1.${BUILD_NUMBER} ."
                        }
                    }
                }
                stage("Building frontend"){
                    steps{
                        echo "====== Building the frontend ======"
                        // Make sure that the container name is available
                        sh "docker stop ${FRONTEND} || true"
                        dir('SmartHomeFrontend'){
                            sh "docker build -t ${DOCKER_USERNAME}/${FRONTEND}:V1.${BUILD_NUMBER} ."
                        }
                    }
                }
                stage("Building simulator"){
                    steps{
                        echo "====== Building the simulator ======"
                        // Make sure that the container name is available
                        sh "docker stop ${SIMULATOR} || true"
                        dir('SmartHomeSimulator'){
                            sh "docker build -t ${DOCKER_USERNAME}/${SIMULATOR}:V1.${BUILD_NUMBER} ."
                        }
                    }
                }
            }
        }
        stage('Test'){
            steps{
                echo "====== Testing the app ======"
                sh "docker network create test-net || true"
                echo "====== Running the backend ======"
                withCredentials([usernamePassword(credentialsId: 'mongo-credentials', passwordVariable: 'MONGO_PASS', usernameVariable: 'MONGO_USER')]) {
                    sh """
                    docker run -d -p 5200:5200 -e \"MONGO_USER=${MONGO_USER}\" -e \"MONGO_PASS=${MONGO_PASS}\" \
                    --rm --network test-net --name test-container ${DOCKER_USERNAME}/${BACKEND}:V1.${BUILD_NUMBER}
                    """
                }
                echo "====== Testing the backend ======"
                sh "sleep 20"
                sh '''
                    docker run --rm \
                    --network test-net \
                    -v /home/jenkins/.jenkins/workspace/smarthome_test:/app \
                    -w /app \
                    python:3.12-slim \
                    /bin/sh -c "pip install requests && python3 SmartHomeBackend/Test/test.py"
                '''
                echo "====== Running the simulator ======"
                sh """
                docker run -d -e \"API_URL=http://test-container:5200\" \
                --rm --network test-net --name ${SIMULATOR} ${DOCKER_USERNAME}/${SIMULATOR}:V1.${BUILD_NUMBER}
                """
                echo "====== Testing the simulator ======"
                sh "sleep 20"
                sh "docker exec ${SIMULATOR} cat status | grep ready"
                echo "====== Running the frontend ======"
                sh """
                docker run -d -e \"VITE_API_URL=http://test-container:5200\" \
                --rm --network test-net --name ${FRONTEND} ${DOCKER_USERNAME}/${FRONTEND}:V1.${BUILD_NUMBER}
                """
                echo "====== Testing the frontend ======"
                sh "sleep 20"
                sh "docker exec ${SIMULATOR} curl http://${FRONTEND}:3001 | grep \"Data\""
            }
            post{
                always{
                    sh "docker rm -f test-container || true"
                    sh "docker rm -f ${SIMULATOR} || true"
                    sh "docker rm -f ${FRONTEND} || true"
                    sh "docker network rm test-net || true"
                }
            }
        }
        stage("Docker login"){
            steps{
                sh "docker logout"
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                    sh "echo $PASS | docker login -u $USER --password-stdin"
                }
            }
        }
        stage('Deploy'){
            parallel{
                stage("Deploying backend"){
                    steps{
                        echo "====== Deploying the backend ======"
                        sh "docker image tag ${DOCKER_USERNAME}/${BACKEND}:V1.$BUILD_NUMBER ${DOCKER_USERNAME}/${BACKEND}:latest"
                        sh "docker push ${DOCKER_USERNAME}/${BACKEND}:latest"
                        sh "docker push ${DOCKER_USERNAME}/${BACKEND}:V1.$BUILD_NUMBER"
                    }
                }
                stage("Deploying frontend"){
                    steps{
                        echo "====== Deploying the frontend ======"
                        sh "docker image tag ${DOCKER_USERNAME}/${FRONTEND}:V1.$BUILD_NUMBER ${DOCKER_USERNAME}/${FRONTEND}:latest"
                        sh "docker push ${DOCKER_USERNAME}/${FRONTEND}:latest"
                        sh "docker push ${DOCKER_USERNAME}/${FRONTEND}:V1.$BUILD_NUMBER"
                    }
                }
                stage("Deploying simulator"){
                    steps{
                        echo "====== Deploying the simulator ======"
                        sh "docker image tag ${DOCKER_USERNAME}/${SIMULATOR}:V1.$BUILD_NUMBER ${DOCKER_USERNAME}/${SIMULATOR}:latest"
                        sh "docker push ${DOCKER_USERNAME}/${SIMULATOR}:latest"
                        sh "docker push ${DOCKER_USERNAME}/${SIMULATOR}:V1.$BUILD_NUMBER"
                    }
                }
            }
        }
    }
    post{
        always{
            // Clean up workspace
            sh "rm -fr *"
            // Remove the containers
            sh "docker stop test-container || true"
            sh "docker stop ${FRONTEND} || true"
            sh "docker stop ${SIMULATOR} || true"
            // Remove images
            sh "docker rmi -f `docker image ls | egrep \"^nadav\" | awk '{print\$3}'` || true"
            sh "docker logout || true"
        }
    }
}
