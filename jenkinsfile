def app_ip = ""
pipeline{
    agent any
    environment{
        APP_NAME = "movies-api"
        MY_NAME = "nadav"
    }
    stages{
        stage('Clone'){
            steps{
                echo "====== Cloning movies-api repo ======"
                sh "mkdir movies-api"
                dir('movies-api'){
                    git branch: 'main', url: 'https://github.com/devopsPRO27/movies-api'
                }
            }
        }
        stage('Build'){
            steps{
                echo "====== Building the app ======"
                // Make sure that the container name is available
                sh "docker stop ${MY_NAME}-${APP_NAME} || true"
                sh "docker build -f ./movies/Dockerfile -t ${MY_NAME}/${APP_NAME}:V1.${BUILD_NUMBER} ."
            }
        }
        stage('Test'){
            steps{
                echo "====== Testing the app ======"
                sh "docker run -d -p 80:80 --rm --name ${MY_NAME}-${APP_NAME} ${MY_NAME}/${APP_NAME}:V1.${BUILD_NUMBER}"
                dir('movies/test'){
                    sh """
                        export APP_HOST=docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${MY_NAME}-${APP_NAME}
                        export APP_PORT=80
                        docker build -t ${MY_NAME}/${APP_NAME}-test:V1.${BUILD_NUMBER} .
                        docker run --env APP_HOST --env APP_PORT --rm --name ${MY_NAME}-${APP_NAME}-test ${MY_NAME}/${APP_NAME}-test:V1.${BUILD_NUMBER}
                    """
                }
            }
            post{
                always{
                    // Remove the testing container
                    sh "docker rm ${MY_NAME}-${APP_NAME}-test || true"
                    // Remove the test image
                    sh "docker rm -f ${MY_NAME}/${APP_NAME}-test:V1.${BUILD_NUMBER} || true"
                }
            }
        }
        
        stage('Deploy'){
            steps{
                echo "====== Deploying the app ======"
                withCredentials([usernamePassword(credentialsId: 'nadav-dockerhub-credentials', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                    sh '''
                        docker logout
                        echo $PASS | docker login -u $USER --password-stdin
                        docker image tag $MY_NAME/$APP_NAME:V1.$BUILD_NUMBER $USER/$APP_NAME:V1.$BUILD_NUMBER
                        docker push $USER/$APP_NAME:V1.$BUILD_NUMBER
                    '''
                }
            }
        }
    }
    post{
        always{
            sh "docker logout"
            // Clean up workspace
            sh "rm -fr *"
            // Remove the app container
            sh "docker stop ${MY_NAME}-${APP_NAME} || true"
            // Remove images
            sh "docker rmi -f `docker image ls | egrep \"^nadav\" | awk '{print\$3}'`"
        }
    }
}
