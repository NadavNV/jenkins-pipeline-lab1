pipeline{
    agent any
    environment{
        FLASK = "smart-home-backend-flask"
        NGINX = "smart-home-backend-nginx"
        GRAFANA = "smart-home-grafana"
        FRONTEND = "smart-home-dashboard"
        SIMULATOR = "smart-home-simulator"
        DOCKER_USERNAME = "nadavnv"
    }
    stages{
        stage("Test docker") {
            steps{
                sh "docker ps"
                // Intentional fail
                sh "curl http://localhost:3000"
            }
        }
        stage('Clone'){
            parallel {
                stage("Cloning backend"){
                    steps{
                        echo "====== Cloning backend repo ======"
                        sh "mkdir SmartHomeBackend"
                        dir('SmartHomeBackend'){
                            git branch: 'main', url: 'https://github.com/NadavNV/SmartHomeBackend'
                        }
                    }
                }
                stage("Cloning frontend"){
                    steps{
                        echo "====== Cloning frontend repo ======"
                        sh "mkdir SmartHomeDashboard"
                        dir('SmartHomeDashboard'){
                            git branch: 'main', url: 'https://github.com/NadavNV/SmartHomeDashboard'
                        }
                    }
                }
                stage("Cloning simulator"){
                    steps{
                        echo "====== Cloning simulator repo ======"
                        sh "mkdir SmartHomeSimulator"
                        dir('SmartHomeSimulator'){
                            git branch: 'main', url: 'https://github.com/NadavNV/SmartHomeSimulator'
                        }
                    }
                }
                stage("Cloning config"){
                    steps{
                        echo "====== Cloning config repo ======"
                        sh "mkdir SmartHomeConfig"
                        dir('SmartHomeConfig'){
                            git branch: 'main', url: 'https://github.com/NadavNV/SmartHomeConfig'
                        }
                    }
                }
            }
        }
        stage('Build'){
            parallel{
                stage("Buidling backend"){
                    steps{
                        echo "====== Building the backend ======"
                        // Make sure that the container names are available
                        sh "docker stop ${FLASK} || true"
                        sh "docker stop ${NGINX}"
                        dir('SmartHomeBackend'){
                            sh "docker build -f flask.Dockerfile -t ${DOCKER_USERNAME}/${FLASK}:V1.${BUILD_NUMBER} ."
                            sh "docker build -f nginx.Dockerfile -t ${DOCKER_USERNAME}/${NGINX}:V1.${BUILD_NUMBER} ."
                        }
                    }
                }
                stage("Building frontend"){
                    steps{
                        echo "====== Building the frontend ======"
                        // Make sure that the container name is available
                        sh "docker stop ${FRONTEND} || true"
                        dir('SmartHomeDashboard'){
                            sh """
                            docker build --build-arg VITE_API_URL=http://localhost:5200 -t \
                            ${DOCKER_USERNAME}/${FRONTEND}:V1.${BUILD_NUMBER} .
                            """
                        }
                    }
                }
                stage("Building simulator"){
                    steps{
                        echo "====== Building the simulator ======"
                        // Make sure that the container name is available
                        sh "docker stop ${SIMULATOR} || true"
                        dir('SmartHomeSimulator'){
                            sh "docker build -t ${DOCKER_USERNAME}/${SIMULATOR}:V1.${BUILD_NUMBER} ."
                        }
                    }
                }
                stage("Building grafana"){
                    steps{
                        echo "====== Building grafana ======"
                        // Make sure that the container name is available
                        sh "docker stop ${GRAFANA} || true"
                        dir('SmartHomeConfig/monitoring/grafana'){
                            sh "docker build -t ${DOCKER_USERNAME}/${GRAFANA}:V1.${BUILD_NUMBER} ."
                        }
                    }
                }
            }
        }
        stage('Test'){
            steps{
                echo "====== Testing the app ======"
                sh "docker network create test-net || true"
                echo "====== Running the backend ======"
                withCredentials([usernamePassword(credentialsId: 'mongo-credentials', passwordVariable: 'MONGO_PASS', usernameVariable: 'MONGO_USER')]) {
                    sh """
                    docker run -d -p 80:80 -e \"MONGO_USER=${MONGO_USER}\" -e \"MONGO_PASS=${MONGO_PASS}\" \
                    --rm --network host --name ${FLASK} ${DOCKER_USERNAME}/${FLASK}:V1.${BUILD_NUMBER}
                    """
                }
                sh """
                docker run -d -p 5200:5200 --rm --network host --name ${NGINX} \
                ${DOCKER_USERNAME}/${NGINX}:V1.${BUILD_NUMBER}
                """
                echo "====== Testing the backend ======"
                sh "for i in {1..10}; do curl http://localhost:80/ready && break || sleep 5; done"
                sh "for i in {1..10}; do curl http://localhost:5200/ready && break || sleep 5; done"
                echo "====== Running the simulator ======"
                sh """
                docker run -d -e \"API_URL=http://localhost:5200\" \
                --rm --network host --name ${SIMULATOR} ${DOCKER_USERNAME}/${SIMULATOR}:V1.${BUILD_NUMBER}
                """
                echo "====== Testing the simulator ======"
                sh "for i in {1..10}; do docker exec ${SIMULATOR} cat status | grep ready && break || sleep 5; done"
                echo "====== Running the frontend ======"
                sh """
                docker run -d --rm --network host --name ${FRONTEND} \
                ${DOCKER_USERNAME}/${FRONTEND}:V1.${BUILD_NUMBER}
                """
                echo "====== Testing the frontend ======"
                sh """bash -c '
                for i in {1..10}; do
                (curl http://localhost:3001 && docker exec ${FRONTEND} curl http://localhost:5200/ready) && break || sleep 5
                done'
                """
                echo "====== Running grafana ======"
                sh """
                docker run -d --rm --network host --name ${GRAFANA} \
                ${DOCKER_USERNAME}/${GRAFANA}:V1.${BUILD_NUMBER}
                """
                echo "====== Testing grafana ======"
                sh "for i in {1..10}; do curl http://localhost:3000/api/health && break || sleep 5; done"
            }
            post{
                always{
                    sh "docker rm -f ${FLASK} || true"
                    sh "docker rm -f ${NGINX} || true"
                    sh "docker rm -f ${SIMULATOR} || true"
                    sh "docker rm -f ${FRONTEND} || true"
                    sh "docker rm -f ${GRAFANA} || true"
                }
            }    
        }
        stage("Docker login"){
            steps{
                sh "docker logout"
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                    sh "echo $PASS | docker login -u $USER --password-stdin"
                }
            }
        }
        stage('Deploy'){
            parallel{
                stage("Deploying backend"){
                    steps{
                        echo "====== Deploying the backend ======"
                        sh "docker image tag ${DOCKER_USERNAME}/${FLASK}:V1.$BUILD_NUMBER ${DOCKER_USERNAME}/${FLASK}:latest"
                        sh "docker image tag ${DOCKER_USERNAME}/${NGINX}:V1.$BUILD_NUMBER ${DOCKER_USERNAME}/${NGINX}:latest"
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${NGINX}:latest"
                        }
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${FLASK}:latest"
                        }
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${FLASK}:V1.$BUILD_NUMBER"
                        }
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${NGINX}:V1.$BUILD_NUMBER"
                        }
                    }
                }
                stage("Deploying frontend"){
                    steps{
                        echo "====== Deploying the frontend ======"
                        sh "docker image tag ${DOCKER_USERNAME}/${FRONTEND}:V1.$BUILD_NUMBER ${DOCKER_USERNAME}/${FRONTEND}:latest"
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${FRONTEND}:latest"
                        }
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${FRONTEND}:V1.$BUILD_NUMBER"
                        }
                    }
                }
                stage("Deploying simulator"){
                    steps{
                        echo "====== Deploying the simulator ======"
                        sh "docker image tag ${DOCKER_USERNAME}/${SIMULATOR}:V1.$BUILD_NUMBER ${DOCKER_USERNAME}/${SIMULATOR}:latest"
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${SIMULATOR}:latest"
                        }
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${SIMULATOR}:V1.$BUILD_NUMBER"
                        }
                    }
                }
                stage("Deploying grafana"){
                    steps{
                        echo "====== Deploying grafana ======"
                        sh "docker image tag ${DOCKER_USERNAME}/${GRAFANA}:V1.$BUILD_NUMBER ${DOCKER_USERNAME}/${GRAFANA}:latest"
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${GRAFANA}:latest"
                        }
                        retry(4){
                            sh "docker push ${DOCKER_USERNAME}/${GRAFANA}:V1.$BUILD_NUMBER"
                        }
                    }
                }
            }
        }
    }
    post{
        always{
            // Clean up workspace
            sh "rm -fr *"
            // Remove the containers
            sh "docker stop ${FLASK} || true"
            sh "docker stop ${NGINX} || true"
            sh "docker stop ${FRONTEND} || true"
            sh "docker stop ${SIMULATOR} || true"
            sh "docker stop ${GRAFANA} || true"
            // Remove images
            sh "docker rmi -f \$(docker image ls | egrep '^nadav' | awk '{print \$3}') || true"
            sh "docker logout || true"
        }
    }
}
